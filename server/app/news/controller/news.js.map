{
    "version": 3,
    "sources": [
        "../../../src/news/controller/news.js"
    ],
    "names": [
        "moment",
        "require",
        "findlistsAction",
        "author_id",
        "get",
        "where",
        "model",
        "join",
        "news",
        "on",
        "page",
        "order",
        "countSelect",
        "success",
        "findAction",
        "id",
        "fieldReverse",
        "find",
        "user",
        "categoryInstance",
        "controller",
        "action",
        "removeAction",
        "delete",
        "affectedRows",
        "addnewsAction",
        "post",
        "title",
        "content",
        "pass",
        "top",
        "imageurl",
        "preview",
        "categories",
        "think",
        "isEmpty",
        "update",
        "Number",
        "add",
        "create_time",
        "now",
        "res",
        "promise",
        "forEach",
        "item",
        "index",
        "push",
        "news_id",
        "cate_id",
        "all",
        "console",
        "log",
        "fail",
        "topAction",
        "datime",
        "utc",
        "format",
        "select",
        "untopAction",
        "updateclickAction",
        "clicked",
        "maxclickAction",
        "limit",
        "data",
        "json",
        "categorylistAction",
        "cate",
        "Date",
        "category",
        "clickmaxAction",
        "max",
        "pvAction",
        "record",
        "date",
        "datepv",
        "count"
    ],
    "mappings": "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",
    "file": "../../../src/news/controller/news.js",
    "sourcesContent": [
        "'use strict'; \nlet moment = require('moment')\nimport Base from '../../common/base/base.js'\nexport default class extends Base{\n  async findlistsAction(){\n    let author_id = this.get(`author_id`);    \n    let where = {}; \n    if(author_id){\n      where = {\n        author_id: author_id\n      }\n    }\n    let news = await this.model(`user`).join({\n      news:{\n        join:\"right\",\n        on:[\"id\",\"author_id\"],\n      }\n    }).\n    where(where).\n    page(this.page, 10).\n    order({\"news.create_time\": 'DESC'}).\n    countSelect();\n    return this.success(news)\n  }\n  async findAction(){\n    let news = await this.model(`news`).where({\"news.id\":this.id}).fieldReverse('password').find();\n    let user = await this.model('user').where({id: news.author_id}).find();\n    let categoryInstance = this.controller('category', 'category');\n    news[`categories`] = await this.action(categoryInstance,'find');\n    news[`user`] = user;    \n    return this.success(news)\n  }\n\n  // 删除新闻\n  async removeAction(){\n    let model = this.model(`news`);\n    let id = this.get(`id`);\n    let affectedRows = await model.where({id:id}).delete()\n    return this.success(affectedRows);\n  }\n  async addnewsAction(){\n    let model = this.model(`news`);    \n    let news =  this.post();\n    // let now =  moment.utc(new Date()).format(\"YYYY-MM-DD\");\n    let {id,title,content,pass,top,imageurl,preview,user,categories} = news;\n    if(!think.isEmpty(id)){\n      let affectedRows = await model.where({id:id}).update({\n        title: title,\n        content: content,\n        pass : Number(pass),\n        top : Number(top),\n        imageurl: imageurl,\n        preview: preview\n      });\n      return this.success(`更新新闻成功`)\n\n    }else{\n        try{\n           let res = await model.add({\n            title: title,\n            create_time: this.now,\n            content: content,\n            pass : Number(pass),\n            top : Number(top),\n            author_id:user.id,\n            imageurl: imageurl,\n            preview: preview\n            });\n            let promise = []; \n        news.categories.forEach(async(item,index)=>{\n          await promise.push(this.model(`news_cate`).add({news_id:res,cate_id:item.id}));\n        })\n        Promise.all(promise);\n        return this.success(`添加新闻成功`)\n        }catch(err){\n            console.log(err)\n            return this.fail(err)\n        } \n      }\n  }\n  async topAction(){  \n    let news = this.model(`news`);\n    let datime = moment.utc(this.get(`date`)).format(`YYYY-MM-DD`)\n    let res = await news.where({create_time:datime,top:1}).select();\n        return this.success(res)\n  }\n  async untopAction(){\n    let news = this.model(`news`),\n        datime = moment.utc(this.get(`date`)).format(`YYYY-MM-DD`),\n        res = await news.where({create_time:datime,top:[\"!=\",1]}).select(); \n    return this.success(res)\n  }\n  async updateclickAction() {\n    let { id , clicked } = this.post()\n    let res = await this.model(`news`).where({id:id}).update({clicked:clicked})\n    return this.success(res)\n  }\n  async maxclickAction(){\n    let data = await this.model(`news`).where({create_time:this.now}).order('clicked DESC').limit(5).select();\n    return this.json(data)\n  }\n  async categorylistAction(){\n    let news = this.model(`news`),\n        cate = this.model(`category`),\n        where = {},\n        create_time = moment(this.get(`create_time`)||new Date()).format(`YYYY-MM-DD`);\n        if(this.id){\n          where = {\n            create_time: create_time,\n            \"cate_id\" : this.id\n          }\n        }else{\n          where = {\n            create_time: create_time,\n          }\n        }\n    let res = await this.model(`news_cate`).join({\n      news:{\n        on:[\"news_id\",\"news.id\"],\n      },\n      category:{\n        on:[\"cate_id\",\"category.id\"],\n      }\n    }).where(where).select();\n    return this.json(res)\n\n  }\n  async clickmaxAction(){\n    let news = this.model(`news`)\n    let clicked =  await news.max(`clicked`);\n    let data = await news.join({\n          user:{\n            on:[\"author_id\",\"id\"]\n          }\n        }).\n        where({clicked:clicked}).\n        fieldReverse(\"id\")\n        .find();\n    return this.json(data)\n  }\n  async pvAction() {\n    let record= this.model(`record`)\n    let {date} = this.post()\n    let  datepv = await record.where({date:this.now}).find();\n    let affectedRows = \"\"\n    console.log(datepv)\n    if(datepv.count){\n          let count = ++datepv.count;\n          affectedRows = await record.where({date: moment(date).format(`YYYY-MM-DD`)}).update({count:count});  \n    }else{\n        affectedRows = await record.where().add({date: moment(date).format(`YYYY-MM-DD`),count:1});\n    } \n  }\n}"
    ]
}