{
    "version": 3,
    "sources": [
        "../../../src/admin/controller/base.js"
    ],
    "names": [
        "http",
        "require",
        "init",
        "__before",
        "islogin",
        "session",
        "user",
        "res",
        "think",
        "isEmpty",
        "id",
        "controller",
        "base"
    ],
    "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;;;;;;;;;;AAEI;;;mBAGAC,I,iBAAKF,I,EAAM;AACP,oCAAME,IAAN,YAAWF,IAAX;AACH,G;;mBAEKG,Q;;;;;;;;;;;;;;;;;;;;AAQN;;;;mBAIMC,O;;;;;;;;qBAEe,KAAKC,OAAL,CAAa,UAAb,C;;;AAAbC,kB;AACAC,iB,GAAMC,MAAMC,OAAN,CAAcH,IAAd,IAAsB,KAAtB,GAA8BA,KAAK,CAAL,EAAQI,E;gDACzCH,G;;;;;;;;;;;;;;;;;AAGZ;AACA;AACA;AACA;AACA;AACC;AACA;AACA;AACA;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;EAlU0BC,MAAMG,UAAN,CAAiBC,I",
    "file": "../../../src/admin/controller/base.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | NEWS [ 新闻网站管理系统 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) inkzhou@gmail.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: zhouying <inkzhou@gmail.com>\n// +----------------------------------------------------------------------\n'use strict';\nvar http = require(\"http\");\nexport default class extends think.controller.base {\n    /**\n     * some base method in here\n     */\n    init(http) {\n        super.init(http);\n    }\n\n    async __before() {\n        //登陆验证\n        // let is_login = await this.islogin();\n        // if (!is_login) {\n        //    return this.fail(`登录过期,请重新登录`);\n        // }\n    }\n\n    /**\n     * 判断是否登录\n     * @returns {boolean}\n     */\n    async islogin() {\n        //判断是否登录\n        let user = await this.session('userInfo');\n        let res = think.isEmpty(user) ? false : user[0].id;\n        return res;\n    }\n\n   //  /**\n   //   * 检查当前用户是否为管理员\n   //   * @param uid\n   //   * @returns {*|boolean}\n   //   */\n    // async is_admin(uid) {\n    //     uid = uid || null;\n    //     uid = think.isEmpty(uid) ? await this.islogin() : uid;\n    //     return uid && (in_array(parseInt(uid), this.config('user_administrator')));\n    // }\n   //  /**\n   //   * 对数据表中的单行或多行记录执行修改 GET参数id为数字或逗号分隔的数字\n   //   *\n   //   * @param {String} model 模型名称,供M函数使用的参数\n   //   * @param {Object}  data  修改的数据\n   //   * @param {Object}  where 查询时的where()方法的参数\n   //   * @param {Object}  msg   执行正确和错误的消息 {'success':'','error':'', 'url':'','ajax':false}\n   //   *                      url为跳转页面,ajax是否ajax方式(数字则为倒数计时秒数)\n   //   *\n   //   * @author arterli <arterli@qq.com>\n   //   */\n   //  async editRow(model, data, where, msg) {\n   //      let id = this.param('id');\n   //      id = think.isArray(id) ? id : id;\n   //      //如存在id字段，则加入该条件\n   //      let fields = this.model(model).getSchema();\n   //      if (in_array('id', fields) && !think.isEmpty(id)) {\n   //          where = think.extend({ 'id': ['IN', id] }, where);\n   //      }\n   //      msg = think.extend({ 'success': '操作成功！', 'error': '操作失败！', 'url': '', 'ajax': this.isAjax() }, msg);\n   //      let res = await this.model(model).where(where).update(data);\n   //      if (res) {\n   //          switch (model){\n   //              case 'channel'://更新频道缓存信息\n   //                  update_cache(\"channel\")//更新频道缓存信息\n   //                  res = true;\n   //                  msg = \"更新导航缓存成功！\";\n   //                  break;\n   //              case 'category'://更新全站分类缓存\n   //                  update_cache(\"category\")//更新栏目缓存\n   //                  res = true;\n   //                  msg = \"更新栏目缓存成功！\";\n   //                  break;\n   //          }\n   //          this.success({ name: msg.success, url: msg.url });\n   //      } else {\n   //          this.fail(msg.error, msg.url);\n   //      }\n   //  }\n\n   //  /**\n   //   * 禁用条目\n   //   * @param {String} model 模型名称,供D函数使用的参数\n   //   * @param {Object}  where 查询时的 where()方法的参数\n   //   * @param {Object}  msg   执行正确和错误的消息,可以设置四个元素 {'success':'','error':'', 'url':'','ajax':false}\n   //   *                     url为跳转页面,ajax是否ajax方式(数字则为倒数计时秒数)\n   //   *\n   //   * @author arterli <arterli@qq.com>\n   //   */\n   //  async forbid(model, where, msg) {\n   //      where = where || {}, msg = msg || { 'success': '状态禁用成功！', 'error': '状态禁用失败！' };\n   //      let data = { 'status': 0 };\n   //      await this.editRow(model, data, where, msg);\n   //  }\n\n   //  /**\n   //   * 恢复条目\n   //   * @param {String} model 模型名称,供D函数使用的参数\n   //   * @param {Object}  where 查询时的where()方法的参数\n   //   * @param {Object}  msg   执行正确和错误的消息 {'success':'','error':'', 'url':'','ajax':false}\n   //   *                     url为跳转页面,ajax是否ajax方式(数字则为倒数计时秒数)\n   //   *\n   //   * @author arterli <arterli@qq.com>\n   //   */\n   //  async resume(model, where, msg) {\n   //      where = where || {}, msg = msg || { 'success': '状态恢复成功！', 'error': '状态恢复失败！' };\n   //      let data = { 'status': 1 };\n   //      await this.editRow(model, data, where, msg);\n   //  }\n\n   //  /**\n   //   * 还原条目\n   //   * @param {string} model 模型名称,供D函数使用的参数\n   //   * @param {array}  where 查询时的where()方法的参数\n   //   * @param {array}  msg   执行正确和错误的消息 {'success':'','error':'', 'url':'','ajax':false}\n   //   *                     url为跳转页面,ajax是否ajax方式(数字则为倒数计时秒数)\n   //   * @author arterli <arterli@qq.com>\n   //   */\n   //  async restore(model, where, msg) {\n   //      where = where || {}, msg = msg || { 'success': '状态还原成功！', 'error': '状态还原失败！' };\n   //      let data = { 'status': 1 };\n   //      where = think.extend({ 'status': -1 }, where);\n   //      await this.editRow(model, data, where, msg);\n   //  }\n\n   //  *\n   //   * 条目假删除\n   //   * @param {string} model 模型名称,供D函数使用的参数\n   //   * @param {array}  where 查询时的where()方法的参数\n   //   * @param {array} msg   执行正确和错误的消息 {'success':'','error':'', 'url':'','ajax':false}\n   //   *                     url为跳转页面,ajax是否ajax方式(数字则为倒数计时秒数)\n   //   *\n   //   * @author arterli <arterli@qq.com>\n     \n   //  async delete(model, where, msg) {\n   //      where = where || {}, msg = msg || { 'success': '删除成功！', 'error': '删除失败！' };\n   //      let data = { 'status': -1 };\n   //      await this.editRow(model, data, where, msg);\n   //  }\n\n   //  /**\n   //   * 设置一条或者多条数据的状态\n   //   */\n   //  async setstatusAction(self, model,pk=\"id\") {\n   //      if(think.isEmpty(this.param('model'))){\n   //          model = model || this.http.controller;\n   //      }else {\n   //          model = this.param('model');\n   //      }\n   //      let ids = this.param('ids');\n   //      let status = this.param('status');\n   //      status = parseInt(status);\n   //      if (think.isEmpty(ids)) {\n   //          this.fail(\"请选择要操作的数据\");\n   //      }\n   //      let map = {};\n   //      if(!think.isEmpty(this.param('pk'))){\n   //          pk=this.param('pk');\n   //      }\n   //       map[pk] = ['IN', ids];\n   //      //let get = this.get();\n   //      //this.end(status);\n   //      switch (status) {\n   //          case -1:\n   //              await this.delete(model, map, { 'success': '删除成功', 'error': '删除失败' });\n   //              break;\n   //          case 0:\n   //              await this.forbid(model, map, { 'success': '禁用成功', 'error': '禁用失败' });\n   //              break;\n   //          case 1:\n   //              await this.resume(model, map, { 'success': '启用成功', 'error': '启用失败' });\n   //              break;\n   //          default:\n   //              this.fail('参数错误');\n   //              break;\n   //      }\n\n   //  }\n\n   //  /**\n   //   * 排序\n   //   */\n   // async sortAction(self,model,id='id'){\n   //  model = model||this.http.controller;\n   //  let param = this.param();\n   //      let sort = JSON.parse(param.sort);\n   //     let data =[]\n   //     for(let v of sort){\n   //         let map={}\n   //         map[id]=v.id;\n   //         map.sort =v.sort;\n   //         data.push(map)\n   //     }\n   //      let res = await this.model(model).updateMany(data);\n   //      if (res>0) {\n   //          //更新缓存\n   //          switch (model){\n   //              case 'channel'://更新频道缓存信息\n   //                  update_cache(\"channel\")//更新频道缓存信息\n   //                  break;\n   //              case 'category'://更新全站分类缓存\n   //                  update_cache(\"category\")//更新栏目缓存\n   //                  break;\n   //          }\n   //         return this.success({ name: \"更新排序成功！\"});\n   //      } else {\n   //         return this.fail(\"排序失败！\");\n   //      }\n   //  }\n   //  async puliccacheAction(self,model){\n   //      let type = this.param('type');\n   //      if(think.isEmpty(type)){\n   //          type = model||this.http.controller;\n   //      }\n   //      let res = false;\n   //      let msg = \"未知错误！\";\n   //      switch (type){\n   //          case 'channel'://更新频道缓存信息\n   //              update_cache(\"channel\")//更新频道缓存信息\n   //              res = true;\n   //              msg = \"更新导航缓存成功！\";\n   //              break;\n   //          case 'category'://更新全站分类缓存\n   //              update_cache(\"category\")//更新栏目缓存\n   //              res = true;\n   //              msg = \"更新栏目缓存成功！\";\n   //              break;\n   //      }\n   //      if(res){\n   //          return this.success({ name: msg});\n   //      }else {\n   //          return this.fail(msg)\n   //      }\n\n   //  }\n   //  /**\n   //   * 返回后台节点数据\n   //   * @param {boolean} tree    是否返回多维数组结构(生成菜单时用到),为false返回一维数组(生成权限节点时用到)\n   //   * @retrun {array}\n   //   *\n   //   * 注意,返回的主菜单节点数组中有'controller'元素,以供区分子节点和主节点\n   //   *\n   //   * @author\n   //   */\n   //  async returnnodes(tree) {\n   //      tree = tree || true;\n   //      let http = this.http;\n   //      //let modelname = http.module;\n   //      let tree_nodes = [];\n   //      if (tree && !think.isEmpty(tree_nodes)) {\n   //          return tree_nodes;\n   //      }\n   //      let nodes;\n   //      if (tree) {\n   //          var list = await this.model('menu').field('id,pid,title,url,tip,hide').order('sort asc').select();\n   //          nodes = get_children(list, 0);\n   //      } else {\n   //          nodes = await this.model('menu').field('title,url,tip,pid').order('sort asc').select();\n\n   //      }\n   //      tree_nodes = nodes;\n   //      return nodes;\n   //  }\n\n   //  /**\n   //   * 处理文档列表显示\n   //   * @param {array} list 列表数据\n   //   * @param {integer} model_id 模型id\n   //   */\n   //  async parseDocumentList(list, model_id) {\n   //      model_id = model_id || 1;\n   //      let attrList = await this.model('attribute').get_model_attribute(model_id, false, 'id,name,type,extra');\n   //      //attrList=attrList[model_id];\n   //      //this.end(attrList);\n   //      // console.log(attrList);\n   //      if (think.isArray(list)) {\n   //          list.forEach((data, k) => {\n   //              //console.log(data);\n   //              for (let key in data) {\n   //                  //console.log(key)\n   //                  if (!think.isEmpty(attrList[key])) {\n   //                      let extra = attrList[key]['extra'];\n   //                      let type = attrList[key]['type'];\n   //                      //console.log(extra);\n   //                      if ('select' == type || 'checkbox' == type || 'radio' == type || 'bool' == type) {\n   //                          // 枚举/多选/单选/布尔型\n   //                          let options = parse_config_attr(extra);\n   //                          let oparr = Object.keys(options);\n   //                          if (options && in_array(data[key], oparr)) {\n   //                              data[key] = options[data[key]];\n   //                          }\n   //                      } else if ('date' == type) { // 日期型\n   //                          data[key] = dateformat('Y-m-d', data[key]);\n   //                      } else if ('datetime' == type) { // 时间型\n   //                          data[key] = dateformat('Y-m-d H:i', data[key]);\n   //                      } else if ('pics' === type) {\n   //                          data[key] = `<span class=\"thumb-sm\"><img alt=\"...\" src=\"${data[key]}\" class=\"img-responsive img-thumbnail\"></span>`;\n   //                      }\n   //                  }\n   //              }\n   //              data.model_id = model_id;\n   //              list[k] = data;\n   //          })\n   //          //console.log(222)\n   //          return list;\n   //      }\n   //  }\n   //  /**\n   //   * 后台栏目权限验证方法\n   //   * await this.admin_priv(\"init\",cid,error) 查看\n   //   * @param ac //init:查看,add:添加,edit:编辑,delete:删除,listorder:排序,push:推送,move:移动，examine：审核，disable：禁用\n   //   * @param cid //栏目id\n   //   * @param error //错误提示\n   //   * @returns {PreventPromise}\n   //   */\n   //  async admin_priv(ac,cid,error=\"您所在的用户组,禁止本操作！\"){\n   //      if(!this.is_admin){\n   //          //访问控制\n   //          let priv = await this.model(\"category_priv\").priv(cid,this.roleid,ac,1);\n   //          if(!priv){\n   //              this.http.error = new Error(error);\n   //              return think.statusAction(702, this.http);\n   //          }\n   //      }\n\n   //  }\n}\n"
    ]
}